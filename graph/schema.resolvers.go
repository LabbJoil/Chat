package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	"time"

	model "github.com/LabbJoil/Chat/Models/RemoteModels"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*model.UserInfo, error) {
	user, err := r.ServiceChat.CreateUser(name, email)
	return user, err
}

// CreateChat is the resolver for the createChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, title string, userID string) (*model.Chat, error) {
	conversation, err := r.ServiceChat.CreateConversation(title, userID)
	return conversation, err
}

// DeleteChat is the resolver for the deleteChat field.
func (r *mutationResolver) DeleteChat(ctx context.Context, chatID string, userID string) (bool, error) {
	if err := r.ServiceChat.DeleteConversation(userID, chatID); err != nil {
		return false, err
	}
	return true, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userID string) (bool, error) {
	if err := r.ServiceChat.DeleteUser(userID); err != nil {
		return false, err
	}
	return true, nil
}

// DeleteMessage is the resolver for the deleteMessage field.
func (r *mutationResolver) DeleteMessage(ctx context.Context, messageID string, userID string) (bool, error) {
	err := r.ServiceChat.DeleteMessage(messageID, userID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// ConcatChat is the resolver for the concatChat field.
func (r *mutationResolver) ConcatChat(ctx context.Context, userID string, chatID string) (bool, error) {
	err := r.ServiceChat.ConcateConversation(userID, chatID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// LeaveChat is the resolver for the leaveChat field.
func (r *mutationResolver) LeaveChat(ctx context.Context, userID string, chatID string) (bool, error) {
	err := r.ServiceChat.LeaveChat(userID, chatID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, senderID string, chatID string, content string) (*model.ChatMessage, error) {
	message, err := r.ServiceChat.CreateMessage(senderID, chatID, content)
	if err != nil {
		return nil, err
	}
	return message, nil
}

// GetFilterMessages is the resolver for the getFilterMessages field.
func (r *queryResolver) GetFilterMessages(ctx context.Context, userID string, count int, chatID string, afterMeesageID string) ([]*model.ChatMessage, error) {
	message, err := r.ServiceChat.GetFilterMessages(userID, chatID, afterMeesageID, count)
	if err != nil {
		return nil, err
	}
	return message, nil
}

// GetAllMessages is the resolver for the getAllMessages field.
func (r *queryResolver) GetAllMessages(ctx context.Context, userID string, chatID string) ([]*model.ChatMessage, error) {
	message, err := r.ServiceChat.GetAllMessages(userID, chatID)
	if err != nil {
		return nil, err
	}
	return message, nil
}

// GetMembers is the resolver for the getMembers field.
func (r *queryResolver) GetMembers(ctx context.Context, userID string, chatID string) ([]*model.UserInfo, error) {
	message, err := r.ServiceChat.GetConversationMembers(userID, chatID)
	if err != nil {
		return nil, err
	}
	return message, nil
}

// GetAllChats is the resolver for the getAllChats field.
func (r *queryResolver) GetAllChats(ctx context.Context, userID string) ([]*model.Chat, error) {
	message, err := r.ServiceChat.GetConversations(userID)
	if err != nil {
		return nil, err
	}
	return message, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, userID string) (*model.UserInfo, error) {
	user, err := r.ServiceChat.GetUser(userID)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// Online is the resolver for the online field.
func (r *subscriptionResolver) Online(ctx context.Context, userID string) (<-chan *model.ChatMessage, error) {
	messageChan := make(chan *model.ChatMessage)
	r.ServiceChat.ReceivedMessages[userID] = make([]string, 0)
	go func() {
		for {
			select {
			case <-ctx.Done():
				fmt.Println("Subscription closed.")
				return
			default:
				fmt.Println("...")
				newMessages, err := r.ServiceChat.ThreadGetMessages(userID)
				if err != nil {
					time.Sleep(time.Second * 5)
					continue
				}
				for _, message := range *newMessages {
					messageChan <- &message
				}
				time.Sleep(time.Second * 3)
			}
		}
	}()
	return messageChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
